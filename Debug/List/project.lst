
AVRASM ver. 2.1.30  C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm Mon Jan 01 14:51:45 2024

C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\nima8\Desktop\Nima-Jahanbazfard_Micro_Camputer_Theory_Project\Debug\List\project.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _tenth=R4
                 	.DEF _tenth_msb=R5
                 	.DEF _second=R6
                 	.DEF _second_msb=R7
                 	.DEF _m=R8
                 	.DEF _m_msb=R9
                 	.DEF _d=R10
                 	.DEF _d_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0071 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0002
000036 0000      	.DB  0x2,0x0,0x0,0x0
                 
                 _0x0:
000037 6573
000038 6f63
000039 646e
00003a 253d      	.DB  0x73,0x65,0x63,0x6F,0x6E,0x64,0x3D,0x25
00003b 0064      	.DB  0x64,0x0
                 _0x2000003:
00003c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003d 0008      	.DW  0x08
00003e 0004      	.DW  0x04
00003f 0066      	.DW  __REG_VARS*2
                 
000040 0002      	.DW  0x02
000041 0274      	.DW  __base_y_G100
000042 0078      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bffb      	OUT  GICR,R31
000049 bfeb      	OUT  GICR,R30
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004b e08d      	LDI  R24,(14-2)+1
00004c e0a2      	LDI  R26,2
00004d 27bb      	CLR  R27
                 __CLEAR_REG:
00004e 93ed      	ST   X+,R30
00004f 958a      	DEC  R24
000050 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000051 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000052 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000053 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000054 93ed      	ST   X+,R30
000055 9701      	SBIW R24,1
000056 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000057 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000058 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000059 9185      	LPM  R24,Z+
00005a 9195      	LPM  R25,Z+
00005b 9700      	SBIW R24,0
00005c f061      	BREQ __GLOBAL_INI_END
00005d 91a5      	LPM  R26,Z+
00005e 91b5      	LPM  R27,Z+
00005f 9005      	LPM  R0,Z+
000060 9015      	LPM  R1,Z+
000061 01bf      	MOVW R22,R30
000062 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000063 9005      	LPM  R0,Z+
000064 920d      	ST   X+,R0
000065 9701      	SBIW R24,1
000066 f7e1      	BRNE __GLOBAL_INI_LOOP
000067 01fb      	MOVW R30,R22
000068 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000069 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006a bfed      	OUT  SPL,R30
00006b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006e e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006f 940c 00bd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;//NIMA_JAHANBAZFAD-MICRO CAMPUTERS THEORY PROJECT
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;int tenth=0, second=0,m=2,d=0;
                 ;char st[20];
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0008       {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000071 920a      	ST   -Y,R0
000072 921a      	ST   -Y,R1
000073 92fa      	ST   -Y,R15
000074 936a      	ST   -Y,R22
000075 937a      	ST   -Y,R23
000076 938a      	ST   -Y,R24
000077 939a      	ST   -Y,R25
000078 93aa      	ST   -Y,R26
000079 93ba      	ST   -Y,R27
00007a 93ea      	ST   -Y,R30
00007b 93fa      	ST   -Y,R31
00007c b7ef      	IN   R30,SREG
00007d 93ea      	ST   -Y,R30
                 ; 0000 0009        tenth++;
00007e 01f2      	MOVW R30,R4
00007f 9631      	ADIW R30,1
000080 012f      	MOVW R4,R30
                 ; 0000 000A        if (tenth==10){
000081 e0ea      	LDI  R30,LOW(10)
000082 e0f0      	LDI  R31,HIGH(10)
000083 15e4      	CP   R30,R4
000084 05f5      	CPC  R31,R5
000085 f481      	BRNE _0x3
                 ; 0000 000B            second++; tenth=0;
000086 01f3      	MOVW R30,R6
000087 9631      	ADIW R30,1
000088 013f      	MOVW R6,R30
000089 2444      	CLR  R4
00008a 2455      	CLR  R5
                 ; 0000 000C            if (second==(8+d)){
00008b 01f5      	MOVW R30,R10
00008c 9638      	ADIW R30,8
00008d 15e6      	CP   R30,R6
00008e 05f7      	CPC  R31,R7
00008f f431      	BRNE _0x4
                 ; 0000 000D                second=0;m++;
000090 2466      	CLR  R6
000091 2477      	CLR  R7
000092 01f4      	MOVW R30,R8
000093 9631      	ADIW R30,1
000094 014f      	MOVW R8,R30
000095 9731      	SBIW R30,1
                 ; 0000 000E                }
                 ; 0000 000F             }
                 _0x4:
                 ; 0000 0010         lcd_clear();
                 _0x3:
000096 d0cf      	RCALL _lcd_clear
                 ; 0000 0011         sprintf(st,"second=%d",second);
000097 e6e0      	LDI  R30,LOW(_st)
000098 e0f2      	LDI  R31,HIGH(_st)
000099 93fa      	ST   -Y,R31
00009a 93ea      	ST   -Y,R30
                +
00009b e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00009c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00009d 93fa      	ST   -Y,R31
00009e 93ea      	ST   -Y,R30
00009f 01f3      	MOVW R30,R6
0000a0 940e 03de 	CALL __CWD1
0000a2 940e 040c 	CALL __PUTPARD1
0000a4 e084      	LDI  R24,4
0000a5 940e 033c 	CALL _sprintf
0000a7 9628      	ADIW R28,8
                 ; 0000 0012         lcd_gotoxy(4,0);
0000a8 e0e4      	LDI  R30,LOW(4)
0000a9 93ea      	ST   -Y,R30
0000aa e0a0      	LDI  R26,LOW(0)
0000ab d0ad      	RCALL _lcd_gotoxy
                 ; 0000 0013         lcd_puts(st);
0000ac e6a0      	LDI  R26,LOW(_st)
0000ad e0b2      	LDI  R27,HIGH(_st)
0000ae d0da      	RCALL _lcd_puts
                 ; 0000 0014       }
0000af 91e9      	LD   R30,Y+
0000b0 bfef      	OUT  SREG,R30
0000b1 91f9      	LD   R31,Y+
0000b2 91e9      	LD   R30,Y+
0000b3 91b9      	LD   R27,Y+
0000b4 91a9      	LD   R26,Y+
0000b5 9199      	LD   R25,Y+
0000b6 9189      	LD   R24,Y+
0000b7 9179      	LD   R23,Y+
0000b8 9169      	LD   R22,Y+
0000b9 90f9      	LD   R15,Y+
0000ba 9019      	LD   R1,Y+
0000bb 9009      	LD   R0,Y+
0000bc 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0018 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0019 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (0<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
0000bd efe7      	LDI  R30,LOW(247)
0000be bbea      	OUT  0x1A,R30
                 ; 0000 001A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 001B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 bbeb      	OUT  0x1B,R30
                 ; 0000 001C 
                 ; 0000 001D // Port B initialization
                 ; 0000 001E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000c1 bbe7      	OUT  0x17,R30
                 ; 0000 0020 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=P
                 ; 0000 0021 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);
0000c2 e0e1      	LDI  R30,LOW(1)
0000c3 bbe8      	OUT  0x18,R30
                 ; 0000 0022 
                 ; 0000 0023 // Port C initialization
                 ; 0000 0024 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0025 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000c4 e0e7      	LDI  R30,LOW(7)
0000c5 bbe4      	OUT  0x14,R30
                 ; 0000 0026 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0027 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bbe5      	OUT  0x15,R30
                 ; 0000 0028 
                 ; 0000 0029 // Port D initialization
                 ; 0000 002A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 002B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000c8 e0e7      	LDI  R30,LOW(7)
0000c9 bbe1      	OUT  0x11,R30
                 ; 0000 002C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 002D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ca e0e0      	LDI  R30,LOW(0)
0000cb bbe2      	OUT  0x12,R30
                 ; 0000 002E 
                 ; 0000 002F // Timer/Counter 0 initialization
                 ; 0000 0030 // Clock source: System Clock
                 ; 0000 0031 // Clock value: 0.977 kHz
                 ; 0000 0032 // Mode: CTC top=OCR0
                 ; 0000 0033 // OC0 output: Disconnected
                 ; 0000 0034 // Timer Period: 99.328 ms
                 ; 0000 0035 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000cc e0ed      	LDI  R30,LOW(13)
0000cd bfe3      	OUT  0x33,R30
                 ; 0000 0036 TCNT0=0x00;
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bfe2      	OUT  0x32,R30
                 ; 0000 0037 OCR0=0x60;
0000d0 e6e0      	LDI  R30,LOW(96)
0000d1 bfec      	OUT  0x3C,R30
                 ; 0000 0038 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0039 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
0000d2 e0e2      	LDI  R30,LOW(2)
0000d3 bfe9      	OUT  0x39,R30
                 ; 0000 003A // Alphanumeric LCD initialization
                 ; 0000 003B // Connections are specified in the
                 ; 0000 003C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 003D // RS - PORTA Bit 0
                 ; 0000 003E // RD - PORTA Bit 1
                 ; 0000 003F // EN - PORTA Bit 2
                 ; 0000 0040 // D4 - PORTA Bit 4
                 ; 0000 0041 // D5 - PORTA Bit 5
                 ; 0000 0042 // D6 - PORTA Bit 6
                 ; 0000 0043 // D7 - PORTA Bit 7
                 ; 0000 0044 // Characters/line: 16
                 ; 0000 0045 lcd_init(16);
0000d4 e1a0      	LDI  R26,LOW(16)
0000d5 d0c4      	RCALL _lcd_init
                 ; 0000 0046 
                 ; 0000 0047 // Global enable interrupts
                 ; 0000 0048 #asm("sei")
0000d6 9478      	sei
                 ; 0000 0049 
                 ; 0000 004A while (1)
                 _0x5:
                 ; 0000 004B       {
                 ; 0000 004C 
                 ; 0000 004D       if(PORTC==0x04){
0000d7 b3e5      	IN   R30,0x15
0000d8 30e4      	CPI  R30,LOW(0x4)
0000d9 f441      	BRNE _0x8
                 ; 0000 004E          if(PINB.0==0){
0000da 99b0      	SBIC 0x16,0
0000db c004      	RJMP _0x9
                 ; 0000 004F //         while(PINB.0==0){;}
                 ; 0000 0050             d=4;}
0000dc e0e4      	LDI  R30,LOW(4)
0000dd e0f0      	LDI  R31,HIGH(4)
0000de 015f      	MOVW R10,R30
                 ; 0000 0051             else {
0000df c002      	RJMP _0xA
                 _0x9:
                 ; 0000 0052             d=0;}
0000e0 24aa      	CLR  R10
0000e1 24bb      	CLR  R11
                 _0xA:
                 ; 0000 0053             }
                 ; 0000 0054       if(PORTD==0x04){
                 _0x8:
0000e2 b3e2      	IN   R30,0x12
0000e3 30e4      	CPI  R30,LOW(0x4)
0000e4 f441      	BRNE _0xB
                 ; 0000 0055          if(PINB.0==0){
0000e5 99b0      	SBIC 0x16,0
0000e6 c004      	RJMP _0xC
                 ; 0000 0056 //         while(PINB.0==0){;}
                 ; 0000 0057             d=4;}
0000e7 e0e4      	LDI  R30,LOW(4)
0000e8 e0f0      	LDI  R31,HIGH(4)
0000e9 015f      	MOVW R10,R30
                 ; 0000 0058              else {
0000ea c002      	RJMP _0xD
                 _0xC:
                 ; 0000 0059             d=0;}
0000eb 24aa      	CLR  R10
0000ec 24bb      	CLR  R11
                 _0xD:
                 ; 0000 005A             }
                 ; 0000 005B       if(second>=0 && second<(8+d) && m%2==0){
                 _0xB:
0000ed 2400      	CLR  R0
0000ee 1460      	CP   R6,R0
0000ef 0470      	CPC  R7,R0
0000f0 f054      	BRLT _0xF
0000f1 940e 0389 	CALL SUBOPT_0x0
0000f3 f43c      	BRGE _0xF
0000f4 01d4      	MOVW R26,R8
0000f5 e0e2      	LDI  R30,LOW(2)
0000f6 e0f0      	LDI  R31,HIGH(2)
0000f7 940e 03f6 	CALL __MODW21
0000f9 9730      	SBIW R30,0
0000fa f009      	BREQ _0x10
                 _0xF:
0000fb c015      	RJMP _0xE
                 _0x10:
                 ; 0000 005C          PORTD=0x01;
0000fc e0e1      	LDI  R30,LOW(1)
0000fd bbe2      	OUT  0x12,R30
                 ; 0000 005D         if(second>=0 && second<(6+d)){
0000fe 2400      	CLR  R0
0000ff 1460      	CP   R6,R0
000100 0470      	CPC  R7,R0
000101 f01c      	BRLT _0x12
000102 940e 038e 	CALL SUBOPT_0x1
000104 f00c      	BRLT _0x13
                 _0x12:
000105 c002      	RJMP _0x11
                 _0x13:
                 ; 0000 005E            PORTC=0x04;}
000106 e0e4      	LDI  R30,LOW(4)
000107 bbe5      	OUT  0x15,R30
                 ; 0000 005F            if(second>=(6+d) && second<(8+d)){
                 _0x11:
000108 940e 038e 	CALL SUBOPT_0x1
00010a f01c      	BRLT _0x15
00010b 940e 0389 	CALL SUBOPT_0x0
00010d f00c      	BRLT _0x16
                 _0x15:
00010e c002      	RJMP _0x14
                 _0x16:
                 ; 0000 0060               PORTC=0x02;}
00010f e0e2      	LDI  R30,LOW(2)
000110 bbe5      	OUT  0x15,R30
                 ; 0000 0061               }
                 _0x14:
                 ; 0000 0062               if(second>=0 && second<(8+d) && m%2==1){
                 _0xE:
000111 2400      	CLR  R0
000112 1460      	CP   R6,R0
000113 0470      	CPC  R7,R0
000114 f064      	BRLT _0x18
000115 940e 0389 	CALL SUBOPT_0x0
000117 f44c      	BRGE _0x18
000118 01d4      	MOVW R26,R8
000119 e0e2      	LDI  R30,LOW(2)
00011a e0f0      	LDI  R31,HIGH(2)
00011b 940e 03f6 	CALL __MODW21
00011d 30e1      	CPI  R30,LOW(0x1)
00011e e0a0      	LDI  R26,HIGH(0x1)
00011f 07fa      	CPC  R31,R26
000120 f009      	BREQ _0x19
                 _0x18:
000121 c015      	RJMP _0x17
                 _0x19:
                 ; 0000 0063                 PORTC=0x01;
000122 e0e1      	LDI  R30,LOW(1)
000123 bbe5      	OUT  0x15,R30
                 ; 0000 0064                 if(second>=0 && second<(6+d)){
000124 2400      	CLR  R0
000125 1460      	CP   R6,R0
000126 0470      	CPC  R7,R0
000127 f01c      	BRLT _0x1B
000128 940e 038e 	CALL SUBOPT_0x1
00012a f00c      	BRLT _0x1C
                 _0x1B:
00012b c002      	RJMP _0x1A
                 _0x1C:
                 ; 0000 0065                    PORTD=0x04;}
00012c e0e4      	LDI  R30,LOW(4)
00012d bbe2      	OUT  0x12,R30
                 ; 0000 0066                    if(second>=(6+d) && second<(8+d)){
                 _0x1A:
00012e 940e 038e 	CALL SUBOPT_0x1
000130 f01c      	BRLT _0x1E
000131 940e 0389 	CALL SUBOPT_0x0
000133 f00c      	BRLT _0x1F
                 _0x1E:
000134 c002      	RJMP _0x1D
                 _0x1F:
                 ; 0000 0067                       PORTD=0x02;}
000135 e0e2      	LDI  R30,LOW(2)
000136 bbe2      	OUT  0x12,R30
                 ; 0000 0068               }
                 _0x1D:
                 ; 0000 0069       }
                 _0x17:
000137 cf9f      	RJMP _0x5
                 ; 0000 006A 
                 ; 0000 006B 
                 ; 0000 006C }
                 _0x20:
000138 cfff      	RJMP _0x20
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000139 93aa      	ST   -Y,R26
00013a b3eb      	IN   R30,0x1B
00013b 70ef      	ANDI R30,LOW(0xF)
00013c 2fae      	MOV  R26,R30
00013d 81e8      	LD   R30,Y
00013e 7fe0      	ANDI R30,LOW(0xF0)
00013f 2bea      	OR   R30,R26
000140 bbeb      	OUT  0x1B,R30
                +
000141 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000142 958a     +DEC R24
000143 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000144 9ada      	SBI  0x1B,2
                +
000145 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000146 958a     +DEC R24
000147 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000148 98da      	CBI  0x1B,2
                +
000149 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00014a 958a     +DEC R24
00014b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00014c c079      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00014d 93aa      	ST   -Y,R26
00014e 81a8      	LD   R26,Y
00014f dfe9      	RCALL __lcd_write_nibble_G100
000150 81e8          ld    r30,y
000151 95e2          swap  r30
000152 83e8          st    y,r30
000153 81a8      	LD   R26,Y
000154 dfe4      	RCALL __lcd_write_nibble_G100
                +
000155 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000156 958a     +DEC R24
000157 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000158 c06d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000159 93aa      	ST   -Y,R26
00015a 81e8      	LD   R30,Y
00015b e0f0      	LDI  R31,0
00015c 58ec      	SUBI R30,LOW(-__base_y_G100)
00015d 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00015e 81e0      	LD   R30,Z
00015f 81a9      	LDD  R26,Y+1
000160 0fae      	ADD  R26,R30
000161 dfeb      	RCALL __lcd_write_data
000162 80d9      	LDD  R13,Y+1
000163 80c8      	LDD  R12,Y+0
000164 9622      	ADIW R28,2
000165 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000166 e0a2      	LDI  R26,LOW(2)
000167 940e 0393 	CALL SUBOPT_0x2
000169 e0ac      	LDI  R26,LOW(12)
00016a dfe2      	RCALL __lcd_write_data
00016b e0a1      	LDI  R26,LOW(1)
00016c 940e 0393 	CALL SUBOPT_0x2
00016e e0e0      	LDI  R30,LOW(0)
00016f 2ece      	MOV  R12,R30
000170 2ede      	MOV  R13,R30
000171 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000172 93aa      	ST   -Y,R26
000173 81a8      	LD   R26,Y
000174 30aa      	CPI  R26,LOW(0xA)
000175 f021      	BREQ _0x2000005
000176 91e0 0278 	LDS  R30,__lcd_maxx
000178 16de      	CP   R13,R30
000179 f048      	BRLO _0x2000004
                 _0x2000005:
00017a e0e0      	LDI  R30,LOW(0)
00017b 93ea      	ST   -Y,R30
00017c 94c3      	INC  R12
00017d 2dac      	MOV  R26,R12
00017e dfda      	RCALL _lcd_gotoxy
00017f 81a8      	LD   R26,Y
000180 30aa      	CPI  R26,LOW(0xA)
000181 f409      	BRNE _0x2000007
000182 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000183 94d3      	INC  R13
000184 9ad8      	SBI  0x1B,0
000185 81a8      	LD   R26,Y
000186 dfc6      	RCALL __lcd_write_data
000187 98d8      	CBI  0x1B,0
000188 c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000189 93ba      	ST   -Y,R27
00018a 93aa      	ST   -Y,R26
00018b 931a      	ST   -Y,R17
                 _0x2000008:
00018c 81a9      	LDD  R26,Y+1
00018d 81ba      	LDD  R27,Y+1+1
00018e 91ed      	LD   R30,X+
00018f 83a9      	STD  Y+1,R26
000190 83ba      	STD  Y+1+1,R27
000191 2f1e      	MOV  R17,R30
000192 30e0      	CPI  R30,0
000193 f019      	BREQ _0x200000A
000194 2fa1      	MOV  R26,R17
000195 dfdc      	RCALL _lcd_putchar
000196 cff5      	RJMP _0x2000008
                 _0x200000A:
000197 8118      	LDD  R17,Y+0
000198 9623      	ADIW R28,3
000199 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00019a 93aa      	ST   -Y,R26
00019b b3ea      	IN   R30,0x1A
00019c 6fe0      	ORI  R30,LOW(0xF0)
00019d bbea      	OUT  0x1A,R30
00019e 9ad2      	SBI  0x1A,2
00019f 9ad0      	SBI  0x1A,0
0001a0 9ad1      	SBI  0x1A,1
0001a1 98da      	CBI  0x1B,2
0001a2 98d8      	CBI  0x1B,0
0001a3 98d9      	CBI  0x1B,1
0001a4 81e8      	LD   R30,Y
0001a5 93e0 0278 	STS  __lcd_maxx,R30
0001a7 58e0      	SUBI R30,-LOW(128)
                +
0001a8 93e0 0276+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001aa 81e8      	LD   R30,Y
0001ab 54e0      	SUBI R30,-LOW(192)
                +
0001ac 93e0 0277+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001ae e1a4      	LDI  R26,LOW(20)
0001af e0b0      	LDI  R27,0
0001b0 940e 03cc 	CALL _delay_ms
0001b2 940e 0399 	CALL SUBOPT_0x3
0001b4 940e 0399 	CALL SUBOPT_0x3
0001b6 940e 0399 	CALL SUBOPT_0x3
0001b8 e2a0      	LDI  R26,LOW(32)
0001b9 df7f      	RCALL __lcd_write_nibble_G100
                +
0001ba e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001bb 958a     +DEC R24
0001bc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001bd e2a8      	LDI  R26,LOW(40)
0001be df8e      	RCALL __lcd_write_data
0001bf e0a4      	LDI  R26,LOW(4)
0001c0 df8c      	RCALL __lcd_write_data
0001c1 e8a5      	LDI  R26,LOW(133)
0001c2 df8a      	RCALL __lcd_write_data
0001c3 e0a6      	LDI  R26,LOW(6)
0001c4 df88      	RCALL __lcd_write_data
0001c5 dfa0      	RCALL _lcd_clear
                 _0x2080002:
0001c6 9621      	ADIW R28,1
0001c7 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001c8 93ba      	ST   -Y,R27
0001c9 93aa      	ST   -Y,R26
0001ca 931a      	ST   -Y,R17
0001cb 930a      	ST   -Y,R16
0001cc 81aa      	LDD  R26,Y+2
0001cd 81bb      	LDD  R27,Y+2+1
0001ce 9612      	ADIW R26,2
0001cf 940e 0404 	CALL __GETW1P
0001d1 9730      	SBIW R30,0
0001d2 f159      	BREQ _0x2020010
0001d3 81aa      	LDD  R26,Y+2
0001d4 81bb      	LDD  R27,Y+2+1
0001d5 9614      	ADIW R26,4
0001d6 940e 0404 	CALL __GETW1P
0001d8 018f      	MOVW R16,R30
0001d9 9730      	SBIW R30,0
0001da f061      	BREQ _0x2020012
                +
0001db 3002     +CPI R16 , LOW ( 2 )
0001dc e0e0     +LDI R30 , HIGH ( 2 )
0001dd 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001de f098      	BRLO _0x2020013
0001df 01f8      	MOVW R30,R16
0001e0 9731      	SBIW R30,1
0001e1 018f      	MOVW R16,R30
                +
0001e2 81aa     +LDD R26 , Y + 2
0001e3 81bb     +LDD R27 , Y + 2 + 1
0001e4 9614     +ADIW R26 , 4
0001e5 93ed     +ST X + , R30
0001e6 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0001e7 81aa      	LDD  R26,Y+2
0001e8 81bb      	LDD  R27,Y+2+1
0001e9 9612      	ADIW R26,2
0001ea 91ed      	LD   R30,X+
0001eb 91fd      	LD   R31,X+
0001ec 9631      	ADIW R30,1
0001ed 93fe      	ST   -X,R31
0001ee 93ee      	ST   -X,R30
0001ef 9731      	SBIW R30,1
0001f0 81ac      	LDD  R26,Y+4
0001f1 83a0      	STD  Z+0,R26
                 _0x2020013:
0001f2 81aa      	LDD  R26,Y+2
0001f3 81bb      	LDD  R27,Y+2+1
0001f4 940e 0404 	CALL __GETW1P
0001f6 23ff      	TST  R31
0001f7 f02a      	BRMI _0x2020014
0001f8 91ed      	LD   R30,X+
0001f9 91fd      	LD   R31,X+
0001fa 9631      	ADIW R30,1
0001fb 93fe      	ST   -X,R31
0001fc 93ee      	ST   -X,R30
                 _0x2020014:
0001fd c006      	RJMP _0x2020015
                 _0x2020010:
0001fe 81aa      	LDD  R26,Y+2
0001ff 81bb      	LDD  R27,Y+2+1
000200 efef      	LDI  R30,LOW(65535)
000201 efff      	LDI  R31,HIGH(65535)
000202 93ed      	ST   X+,R30
000203 93fc      	ST   X,R31
                 _0x2020015:
000204 8119      	LDD  R17,Y+1
000205 8108      	LDD  R16,Y+0
000206 9625      	ADIW R28,5
000207 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000208 93ba      	ST   -Y,R27
000209 93aa      	ST   -Y,R26
00020a 9726      	SBIW R28,6
00020b 940e 0411 	CALL __SAVELOCR6
00020d e010      	LDI  R17,0
00020e 85ac      	LDD  R26,Y+12
00020f 85bd      	LDD  R27,Y+12+1
000210 e0e0      	LDI  R30,LOW(0)
000211 e0f0      	LDI  R31,HIGH(0)
000212 93ed      	ST   X+,R30
000213 93fc      	ST   X,R31
                 _0x2020016:
000214 89ea      	LDD  R30,Y+18
000215 89fb      	LDD  R31,Y+18+1
000216 9631      	ADIW R30,1
000217 8bea      	STD  Y+18,R30
000218 8bfb      	STD  Y+18+1,R31
000219 9731      	SBIW R30,1
00021a 91e4      	LPM  R30,Z
00021b 2f2e      	MOV  R18,R30
00021c 30e0      	CPI  R30,0
00021d f409      	BRNE PC+2
00021e c115      	RJMP _0x2020018
00021f 2fe1      	MOV  R30,R17
000220 30e0      	CPI  R30,0
000221 f439      	BRNE _0x202001C
000222 3225      	CPI  R18,37
000223 f411      	BRNE _0x202001D
000224 e011      	LDI  R17,LOW(1)
000225 c002      	RJMP _0x202001E
                 _0x202001D:
000226 940e 03a0 	CALL SUBOPT_0x4
                 _0x202001E:
000228 c10a      	RJMP _0x202001B
                 _0x202001C:
000229 30e1      	CPI  R30,LOW(0x1)
00022a f4a9      	BRNE _0x202001F
00022b 3225      	CPI  R18,37
00022c f419      	BRNE _0x2020020
00022d 940e 03a0 	CALL SUBOPT_0x4
00022f c102      	RJMP _0x20200CC
                 _0x2020020:
000230 e012      	LDI  R17,LOW(2)
000231 e040      	LDI  R20,LOW(0)
000232 e000      	LDI  R16,LOW(0)
000233 322d      	CPI  R18,45
000234 f411      	BRNE _0x2020021
000235 e001      	LDI  R16,LOW(1)
000236 c0fc      	RJMP _0x202001B
                 _0x2020021:
000237 322b      	CPI  R18,43
000238 f411      	BRNE _0x2020022
000239 e24b      	LDI  R20,LOW(43)
00023a c0f8      	RJMP _0x202001B
                 _0x2020022:
00023b 3220      	CPI  R18,32
00023c f411      	BRNE _0x2020023
00023d e240      	LDI  R20,LOW(32)
00023e c0f4      	RJMP _0x202001B
                 _0x2020023:
00023f c002      	RJMP _0x2020024
                 _0x202001F:
000240 30e2      	CPI  R30,LOW(0x2)
000241 f439      	BRNE _0x2020025
                 _0x2020024:
000242 e050      	LDI  R21,LOW(0)
000243 e013      	LDI  R17,LOW(3)
000244 3320      	CPI  R18,48
000245 f411      	BRNE _0x2020026
000246 6800      	ORI  R16,LOW(128)
000247 c0eb      	RJMP _0x202001B
                 _0x2020026:
000248 c003      	RJMP _0x2020027
                 _0x2020025:
000249 30e3      	CPI  R30,LOW(0x3)
00024a f009      	BREQ PC+2
00024b c0e7      	RJMP _0x202001B
                 _0x2020027:
00024c 3320      	CPI  R18,48
00024d f010      	BRLO _0x202002A
00024e 332a      	CPI  R18,58
00024f f008      	BRLO _0x202002B
                 _0x202002A:
000250 c007      	RJMP _0x2020029
                 _0x202002B:
000251 e0aa      	LDI  R26,LOW(10)
000252 9f5a      	MUL  R21,R26
000253 2d50      	MOV  R21,R0
000254 2fe2      	MOV  R30,R18
000255 53e0      	SUBI R30,LOW(48)
000256 0f5e      	ADD  R21,R30
000257 c0db      	RJMP _0x202001B
                 _0x2020029:
000258 2fe2      	MOV  R30,R18
000259 36e3      	CPI  R30,LOW(0x63)
00025a f449      	BRNE _0x202002F
00025b 940e 03a7 	CALL SUBOPT_0x5
00025d 89e8      	LDD  R30,Y+16
00025e 89f9      	LDD  R31,Y+16+1
00025f 81a4      	LDD  R26,Z+4
000260 93aa      	ST   -Y,R26
000261 940e 03ad 	CALL SUBOPT_0x6
000263 c0ce      	RJMP _0x2020030
                 _0x202002F:
000264 37e3      	CPI  R30,LOW(0x73)
000265 f441      	BRNE _0x2020032
000266 940e 03a7 	CALL SUBOPT_0x5
000268 940e 03b3 	CALL SUBOPT_0x7
00026a 940e 0370 	CALL _strlen
00026c 2f1e      	MOV  R17,R30
00026d c00a      	RJMP _0x2020033
                 _0x2020032:
00026e 37e0      	CPI  R30,LOW(0x70)
00026f f461      	BRNE _0x2020035
000270 940e 03a7 	CALL SUBOPT_0x5
000272 940e 03b3 	CALL SUBOPT_0x7
000274 940e 037c 	CALL _strlenf
000276 2f1e      	MOV  R17,R30
000277 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000278 6002      	ORI  R16,LOW(2)
000279 770f      	ANDI R16,LOW(127)
00027a e030      	LDI  R19,LOW(0)
00027b c034      	RJMP _0x2020036
                 _0x2020035:
00027c 36e4      	CPI  R30,LOW(0x64)
00027d f011      	BREQ _0x2020039
00027e 36e9      	CPI  R30,LOW(0x69)
00027f f411      	BRNE _0x202003A
                 _0x2020039:
000280 6004      	ORI  R16,LOW(4)
000281 c002      	RJMP _0x202003B
                 _0x202003A:
000282 37e5      	CPI  R30,LOW(0x75)
000283 f431      	BRNE _0x202003C
                 _0x202003B:
000284 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000285 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000286 83ee      	STD  Y+6,R30
000287 83ff      	STD  Y+6+1,R31
000288 e015      	LDI  R17,LOW(5)
000289 c00c      	RJMP _0x202003D
                 _0x202003C:
00028a 35e8      	CPI  R30,LOW(0x58)
00028b f411      	BRNE _0x202003F
00028c 6008      	ORI  R16,LOW(8)
00028d c003      	RJMP _0x2020040
                 _0x202003F:
00028e 37e8      	CPI  R30,LOW(0x78)
00028f f009      	BREQ PC+2
000290 c0a1      	RJMP _0x2020071
                 _0x2020040:
000291 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000292 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000293 83ee      	STD  Y+6,R30
000294 83ff      	STD  Y+6+1,R31
000295 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000296 ff02      	SBRS R16,2
000297 c014      	RJMP _0x2020042
000298 940e 03a7 	CALL SUBOPT_0x5
00029a 940e 03bd 	CALL SUBOPT_0x8
00029c 85ab      	LDD  R26,Y+11
00029d 23aa      	TST  R26
00029e f43a      	BRPL _0x2020043
00029f 85ea      	LDD  R30,Y+10
0002a0 85fb      	LDD  R31,Y+10+1
0002a1 940e 03da 	CALL __ANEGW1
0002a3 87ea      	STD  Y+10,R30
0002a4 87fb      	STD  Y+10+1,R31
0002a5 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002a6 3040      	CPI  R20,0
0002a7 f011      	BREQ _0x2020044
0002a8 5f1f      	SUBI R17,-LOW(1)
0002a9 c001      	RJMP _0x2020045
                 _0x2020044:
0002aa 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002ab c004      	RJMP _0x2020046
                 _0x2020042:
0002ac 940e 03a7 	CALL SUBOPT_0x5
0002ae 940e 03bd 	CALL SUBOPT_0x8
                 _0x2020046:
                 _0x2020036:
0002b0 fd00      	SBRC R16,0
0002b1 c011      	RJMP _0x2020047
                 _0x2020048:
0002b2 1715      	CP   R17,R21
0002b3 f478      	BRSH _0x202004A
0002b4 ff07      	SBRS R16,7
0002b5 c008      	RJMP _0x202004B
0002b6 ff02      	SBRS R16,2
0002b7 c004      	RJMP _0x202004C
0002b8 7f0b      	ANDI R16,LOW(251)
0002b9 2f24      	MOV  R18,R20
0002ba 5011      	SUBI R17,LOW(1)
0002bb c001      	RJMP _0x202004D
                 _0x202004C:
0002bc e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002bd c001      	RJMP _0x202004E
                 _0x202004B:
0002be e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002bf 940e 03a0 	CALL SUBOPT_0x4
0002c1 5051      	SUBI R21,LOW(1)
0002c2 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002c3 2f31      	MOV  R19,R17
0002c4 ff01      	SBRS R16,1
0002c5 c017      	RJMP _0x202004F
                 _0x2020050:
0002c6 3030      	CPI  R19,0
0002c7 f0a1      	BREQ _0x2020052
0002c8 ff03      	SBRS R16,3
0002c9 c006      	RJMP _0x2020053
0002ca 81ee      	LDD  R30,Y+6
0002cb 81ff      	LDD  R31,Y+6+1
0002cc 9125      	LPM  R18,Z+
0002cd 83ee      	STD  Y+6,R30
0002ce 83ff      	STD  Y+6+1,R31
0002cf c005      	RJMP _0x2020054
                 _0x2020053:
0002d0 81ae      	LDD  R26,Y+6
0002d1 81bf      	LDD  R27,Y+6+1
0002d2 912d      	LD   R18,X+
0002d3 83ae      	STD  Y+6,R26
0002d4 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002d5 940e 03a0 	CALL SUBOPT_0x4
0002d7 3050      	CPI  R21,0
0002d8 f009      	BREQ _0x2020055
0002d9 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002da 5031      	SUBI R19,LOW(1)
0002db cfea      	RJMP _0x2020050
                 _0x2020052:
0002dc c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002dd e320      	LDI  R18,LOW(48)
0002de 81ee      	LDD  R30,Y+6
0002df 81ff      	LDD  R31,Y+6+1
0002e0 940e 0408 	CALL __GETW1PF
0002e2 87e8      	STD  Y+8,R30
0002e3 87f9      	STD  Y+8+1,R31
0002e4 81ee      	LDD  R30,Y+6
0002e5 81ff      	LDD  R31,Y+6+1
0002e6 9632      	ADIW R30,2
0002e7 83ee      	STD  Y+6,R30
0002e8 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002e9 85e8      	LDD  R30,Y+8
0002ea 85f9      	LDD  R31,Y+8+1
0002eb 85aa      	LDD  R26,Y+10
0002ec 85bb      	LDD  R27,Y+10+1
0002ed 17ae      	CP   R26,R30
0002ee 07bf      	CPC  R27,R31
0002ef f050      	BRLO _0x202005C
0002f0 5f2f      	SUBI R18,-LOW(1)
0002f1 85a8      	LDD  R26,Y+8
0002f2 85b9      	LDD  R27,Y+8+1
0002f3 85ea      	LDD  R30,Y+10
0002f4 85fb      	LDD  R31,Y+10+1
0002f5 1bea      	SUB  R30,R26
0002f6 0bfb      	SBC  R31,R27
0002f7 87ea      	STD  Y+10,R30
0002f8 87fb      	STD  Y+10+1,R31
0002f9 cfef      	RJMP _0x202005A
                 _0x202005C:
0002fa 332a      	CPI  R18,58
0002fb f028      	BRLO _0x202005D
0002fc ff03      	SBRS R16,3
0002fd c002      	RJMP _0x202005E
0002fe 5f29      	SUBI R18,-LOW(7)
0002ff c001      	RJMP _0x202005F
                 _0x202005E:
000300 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000301 fd04      	SBRC R16,4
000302 c01a      	RJMP _0x2020061
000303 3321      	CPI  R18,49
000304 f420      	BRSH _0x2020063
000305 85a8      	LDD  R26,Y+8
000306 85b9      	LDD  R27,Y+8+1
000307 9711      	SBIW R26,1
000308 f409      	BRNE _0x2020062
                 _0x2020063:
000309 c009      	RJMP _0x20200CD
                 _0x2020062:
00030a 1753      	CP   R21,R19
00030b f010      	BRLO _0x2020067
00030c ff00      	SBRS R16,0
00030d c001      	RJMP _0x2020068
                 _0x2020067:
00030e c013      	RJMP _0x2020066
                 _0x2020068:
00030f e220      	LDI  R18,LOW(32)
000310 ff07      	SBRS R16,7
000311 c00b      	RJMP _0x2020069
000312 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000313 6100      	ORI  R16,LOW(16)
000314 ff02      	SBRS R16,2
000315 c007      	RJMP _0x202006A
000316 7f0b      	ANDI R16,LOW(251)
000317 934a      	ST   -Y,R20
000318 940e 03ad 	CALL SUBOPT_0x6
00031a 3050      	CPI  R21,0
00031b f009      	BREQ _0x202006B
00031c 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00031d 940e 03a0 	CALL SUBOPT_0x4
00031f 3050      	CPI  R21,0
000320 f009      	BREQ _0x202006C
000321 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000322 5031      	SUBI R19,LOW(1)
000323 85a8      	LDD  R26,Y+8
000324 85b9      	LDD  R27,Y+8+1
000325 9712      	SBIW R26,2
000326 f008      	BRLO _0x2020059
000327 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000328 ff00      	SBRS R16,0
000329 c008      	RJMP _0x202006D
                 _0x202006E:
00032a 3050      	CPI  R21,0
00032b f031      	BREQ _0x2020070
00032c 5051      	SUBI R21,LOW(1)
00032d e2e0      	LDI  R30,LOW(32)
00032e 93ea      	ST   -Y,R30
00032f 940e 03ad 	CALL SUBOPT_0x6
000331 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000332 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000333 cee0      	RJMP _0x2020016
                 _0x2020018:
000334 85ac      	LDD  R26,Y+12
000335 85bd      	LDD  R27,Y+12+1
000336 940e 0404 	CALL __GETW1P
000338 940e 0418 	CALL __LOADLOCR6
00033a 9664      	ADIW R28,20
00033b 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00033c 92ff      	PUSH R15
00033d 2ef8      	MOV  R15,R24
00033e 9726      	SBIW R28,6
00033f 940e 0413 	CALL __SAVELOCR4
000341 940e 03c5 	CALL SUBOPT_0x9
000343 9730      	SBIW R30,0
000344 f419      	BRNE _0x2020072
000345 efef      	LDI  R30,LOW(65535)
000346 efff      	LDI  R31,HIGH(65535)
000347 c023      	RJMP _0x2080001
                 _0x2020072:
000348 01de      	MOVW R26,R28
000349 9616      	ADIW R26,6
00034a 940e 03d6 	CALL __ADDW2R15
00034c 018d      	MOVW R16,R26
00034d 940e 03c5 	CALL SUBOPT_0x9
00034f 83ee      	STD  Y+6,R30
000350 83ff      	STD  Y+6+1,R31
000351 e0e0      	LDI  R30,LOW(0)
000352 87e8      	STD  Y+8,R30
000353 87e9      	STD  Y+8+1,R30
000354 01de      	MOVW R26,R28
000355 961a      	ADIW R26,10
000356 940e 03d6 	CALL __ADDW2R15
000358 940e 0404 	CALL __GETW1P
00035a 93fa      	ST   -Y,R31
00035b 93ea      	ST   -Y,R30
00035c 931a      	ST   -Y,R17
00035d 930a      	ST   -Y,R16
00035e ece8      	LDI  R30,LOW(_put_buff_G101)
00035f e0f1      	LDI  R31,HIGH(_put_buff_G101)
000360 93fa      	ST   -Y,R31
000361 93ea      	ST   -Y,R30
000362 01de      	MOVW R26,R28
000363 961a      	ADIW R26,10
000364 dea3      	RCALL __print_G101
000365 019f      	MOVW R18,R30
000366 81ae      	LDD  R26,Y+6
000367 81bf      	LDD  R27,Y+6+1
000368 e0e0      	LDI  R30,LOW(0)
000369 93ec      	ST   X,R30
00036a 01f9      	MOVW R30,R18
                 _0x2080001:
00036b 940e 041a 	CALL __LOADLOCR4
00036d 962a      	ADIW R28,10
00036e 90ff      	POP  R15
00036f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000370 93ba      	ST   -Y,R27
000371 93aa      	ST   -Y,R26
000372 91a9          ld   r26,y+
000373 91b9          ld   r27,y+
000374 27ee          clr  r30
000375 27ff          clr  r31
                 strlen0:
000376 916d          ld   r22,x+
000377 2366          tst  r22
000378 f011          breq strlen1
000379 9631          adiw r30,1
00037a cffb          rjmp strlen0
                 strlen1:
00037b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00037c 93ba      	ST   -Y,R27
00037d 93aa      	ST   -Y,R26
00037e 27aa          clr  r26
00037f 27bb          clr  r27
000380 91e9          ld   r30,y+
000381 91f9          ld   r31,y+
                 strlenf0:
000382 9005      	lpm  r0,z+
000383 2000          tst  r0
000384 f011          breq strlenf1
000385 9611          adiw r26,1
000386 cffb          rjmp strlenf0
                 strlenf1:
000387 01fd          movw r30,r26
000388 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _st:
000260           	.BYTE 0x14
                 __base_y_G100:
000274           	.BYTE 0x4
                 __lcd_maxx:
000278           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000389 01f5      	MOVW R30,R10
00038a 9638      	ADIW R30,8
00038b 166e      	CP   R6,R30
00038c 067f      	CPC  R7,R31
00038d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00038e 01f5      	MOVW R30,R10
00038f 9636      	ADIW R30,6
000390 166e      	CP   R6,R30
000391 067f      	CPC  R7,R31
000392 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000393 940e 014d 	CALL __lcd_write_data
000395 e0a3      	LDI  R26,LOW(3)
000396 e0b0      	LDI  R27,0
000397 940c 03cc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000399 e3a0      	LDI  R26,LOW(48)
00039a 940e 0139 	CALL __lcd_write_nibble_G100
                +
00039c e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00039d 958a     +DEC R24
00039e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00039f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0003a0 932a      	ST   -Y,R18
0003a1 85ad      	LDD  R26,Y+13
0003a2 85be      	LDD  R27,Y+13+1
0003a3 85ef      	LDD  R30,Y+15
0003a4 89f8      	LDD  R31,Y+15+1
0003a5 9509      	ICALL
0003a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0003a7 89e8      	LDD  R30,Y+16
0003a8 89f9      	LDD  R31,Y+16+1
0003a9 9734      	SBIW R30,4
0003aa 8be8      	STD  Y+16,R30
0003ab 8bf9      	STD  Y+16+1,R31
0003ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0003ad 85ad      	LDD  R26,Y+13
0003ae 85be      	LDD  R27,Y+13+1
0003af 85ef      	LDD  R30,Y+15
0003b0 89f8      	LDD  R31,Y+15+1
0003b1 9509      	ICALL
0003b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0003b3 89a8      	LDD  R26,Y+16
0003b4 89b9      	LDD  R27,Y+16+1
0003b5 9614      	ADIW R26,4
0003b6 940e 0404 	CALL __GETW1P
0003b8 83ee      	STD  Y+6,R30
0003b9 83ff      	STD  Y+6+1,R31
0003ba 81ae      	LDD  R26,Y+6
0003bb 81bf      	LDD  R27,Y+6+1
0003bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0003bd 89a8      	LDD  R26,Y+16
0003be 89b9      	LDD  R27,Y+16+1
0003bf 9614      	ADIW R26,4
0003c0 940e 0404 	CALL __GETW1P
0003c2 87ea      	STD  Y+10,R30
0003c3 87fb      	STD  Y+10+1,R31
0003c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003c5 01de      	MOVW R26,R28
0003c6 961c      	ADIW R26,12
0003c7 940e 03d6 	CALL __ADDW2R15
0003c9 940e 0404 	CALL __GETW1P
0003cb 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003cc 9610      	adiw r26,0
0003cd f039      	breq __delay_ms1
                 __delay_ms0:
0003ce 95a8      	wdr
                +
0003cf ef8a     +LDI R24 , LOW ( 0xFA )
0003d0 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0003d1 9701     +SBIW R24 , 1
0003d2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0003d3 9711      	sbiw r26,1
0003d4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003d5 9508      	ret
                 
                 __ADDW2R15:
0003d6 2400      	CLR  R0
0003d7 0daf      	ADD  R26,R15
0003d8 1db0      	ADC  R27,R0
0003d9 9508      	RET
                 
                 __ANEGW1:
0003da 95f1      	NEG  R31
0003db 95e1      	NEG  R30
0003dc 40f0      	SBCI R31,0
0003dd 9508      	RET
                 
                 __CWD1:
0003de 2f6f      	MOV  R22,R31
0003df 0f66      	ADD  R22,R22
0003e0 0b66      	SBC  R22,R22
0003e1 2f76      	MOV  R23,R22
0003e2 9508      	RET
                 
                 __DIVW21U:
0003e3 2400      	CLR  R0
0003e4 2411      	CLR  R1
0003e5 e190      	LDI  R25,16
                 __DIVW21U1:
0003e6 0faa      	LSL  R26
0003e7 1fbb      	ROL  R27
0003e8 1c00      	ROL  R0
0003e9 1c11      	ROL  R1
0003ea 1a0e      	SUB  R0,R30
0003eb 0a1f      	SBC  R1,R31
0003ec f418      	BRCC __DIVW21U2
0003ed 0e0e      	ADD  R0,R30
0003ee 1e1f      	ADC  R1,R31
0003ef c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003f0 60a1      	SBR  R26,1
                 __DIVW21U3:
0003f1 959a      	DEC  R25
0003f2 f799      	BRNE __DIVW21U1
0003f3 01fd      	MOVW R30,R26
0003f4 01d0      	MOVW R26,R0
0003f5 9508      	RET
                 
                 __MODW21:
0003f6 94e8      	CLT
0003f7 ffb7      	SBRS R27,7
0003f8 c004      	RJMP __MODW211
0003f9 95a0      	COM  R26
0003fa 95b0      	COM  R27
0003fb 9611      	ADIW R26,1
0003fc 9468      	SET
                 __MODW211:
0003fd fdf7      	SBRC R31,7
0003fe dfdb      	RCALL __ANEGW1
0003ff dfe3      	RCALL __DIVW21U
000400 01fd      	MOVW R30,R26
000401 f40e      	BRTC __MODW212
000402 dfd7      	RCALL __ANEGW1
                 __MODW212:
000403 9508      	RET
                 
                 __GETW1P:
000404 91ed      	LD   R30,X+
000405 91fc      	LD   R31,X
000406 9711      	SBIW R26,1
000407 9508      	RET
                 
                 __GETW1PF:
000408 9005      	LPM  R0,Z+
000409 91f4      	LPM  R31,Z
00040a 2de0      	MOV  R30,R0
00040b 9508      	RET
                 
                 __PUTPARD1:
00040c 937a      	ST   -Y,R23
00040d 936a      	ST   -Y,R22
00040e 93fa      	ST   -Y,R31
00040f 93ea      	ST   -Y,R30
000410 9508      	RET
                 
                 __SAVELOCR6:
000411 935a      	ST   -Y,R21
                 __SAVELOCR5:
000412 934a      	ST   -Y,R20
                 __SAVELOCR4:
000413 933a      	ST   -Y,R19
                 __SAVELOCR3:
000414 932a      	ST   -Y,R18
                 __SAVELOCR2:
000415 931a      	ST   -Y,R17
000416 930a      	ST   -Y,R16
000417 9508      	RET
                 
                 __LOADLOCR6:
000418 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000419 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00041a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00041b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00041c 8119      	LDD  R17,Y+1
00041d 8108      	LD   R16,Y
00041e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  30 r1 :   7 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :  11 r7 :   8 
r8 :   4 r9 :   0 r10:   7 r11:   2 r12:   4 r13:   4 r14:   0 r15:   6 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  13 r23:   4 
r24:  25 r25:   7 r26: 110 r27:  42 r28:  14 r29:   1 r30: 228 r31:  73 
x  :  23 y  : 189 z  :  15 
Registers used: 31 out of 35 (88.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  31 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  19 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :  10 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  59 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  21 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  12 cpc   :  11 cpi   :  36 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  23 ld    :  37 ldd   :  76 ldi   : 112 
lds   :   1 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  19 movw  :  31 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  27 pop   :   1 push  :   1 rcall :  21 ret   :  29 
reti  :   1 rjmp  :  71 rol   :   3 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :   5 sbic  :   2 sbis  :   0 sbiw  :  19 sbr   :   1 sbrc  :   3 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  71 std   :  31 sts   :   3 sub   :   2 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 66 out of 116 (56.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00083e   2058     52   2110   32768   6.4%
[.dseg] 0x000060 0x000279      0     25     25    2048   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
